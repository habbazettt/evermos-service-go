basePath: /api/v1
definitions:
  controllers.LoginRequest:
    properties:
      kata_sandi:
        type: string
      no_telp:
        type: string
    type: object
  controllers.LoginResponse:
    properties:
      email:
        type: string
      id_kota:
        $ref: '#/definitions/services.City'
      id_provinsi:
        $ref: '#/definitions/services.Province'
      is_admin:
        type: boolean
      jenis_kelamin:
        type: string
      nama:
        type: string
      no_telp:
        type: string
      pekerjaan:
        type: string
      tanggal_Lahir:
        type: string
      tentang:
        type: string
      token:
        type: string
    type: object
  controllers.RegisterRequest:
    properties:
      email:
        type: string
      id_kota:
        type: string
      id_provinsi:
        type: string
      is_admin:
        type: boolean
      jenis_kelamin:
        type: string
      kata_sandi:
        type: string
      nama:
        type: string
      no_telp:
        type: string
      pekerjaan:
        type: string
      tanggal_lahir:
        type: string
      tentang:
        type: string
    type: object
  controllers.Response:
    properties:
      data: {}
      errors: {}
      message:
        type: string
      status:
        type: boolean
    type: object
  models.Alamat:
    properties:
      created_at:
        type: string
      detail_alamat:
        type: string
      id:
        type: integer
      id_user:
        type: integer
      judul_alamat:
        type: string
      nama_penerima:
        type: string
      no_telp:
        type: string
      updated_at:
        type: string
    type: object
  services.City:
    properties:
      id:
        type: string
      name:
        type: string
      province_id:
        type: string
    type: object
  services.Province:
    properties:
      id:
        type: string
      name:
        type: string
    type: object
  services.UpdateUserRequest:
    properties:
      email:
        type: string
      id_kota:
        type: string
      id_provinsi:
        type: string
      is_admin:
        type: boolean
      jenis_kelamin:
        type: string
      kata_sandi:
        type: string
      nama:
        type: string
      no_telp:
        type: string
      pekerjaan:
        type: string
      tanggal_Lahir:
        type: string
      tentang:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    name: API Support
    url: http://www.swagger.io/support
  description: API documentation for Evermos service backend.
  termsOfService: http://swagger.io/terms/
  title: Evermos Store and Product API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login a user and return a JWT token along with user details.
      parameters:
      - description: Login Request Body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controllers.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.Response'
      summary: Login a user with phone number and password
      tags:
      - Authentication
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user with the provided details (name, phone number,
        email, password, etc.)
      parameters:
      - description: Register Request Body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controllers.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/controllers.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.Response'
      summary: Register a new user to the system
      tags:
      - Authentication
  /category:
    get:
      consumes:
      - application/json
      description: Get a list of all categories.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.Response'
      summary: Get All Categories
      tags:
      - Category
    post:
      consumes:
      - application/json
      description: Create a new category (Admin only).
      parameters:
      - description: Category Data
        in: body
        name: request
        required: true
        schema:
          properties:
            nama_category:
              type: string
          type: object
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/controllers.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controllers.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.Response'
      security:
      - BearerAuth: []
      summary: Create a new category
      tags:
      - Category
  /category/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a category by ID (Admin only).
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controllers.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controllers.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.Response'
      security:
      - BearerAuth: []
      summary: Delete a category
      tags:
      - Category
    get:
      consumes:
      - application/json
      description: Get detailed information of a specific category by ID.
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controllers.Response'
      summary: Get Category By ID
      tags:
      - Category
    put:
      consumes:
      - application/json
      description: Update a category's name (Admin only).
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      - description: Category Data
        in: body
        name: request
        required: true
        schema:
          properties:
            nama_category:
              type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controllers.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controllers.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.Response'
      security:
      - BearerAuth: []
      summary: Update a category
      tags:
      - Category
  /provcity/detailcity/{city_id}:
    get:
      consumes:
      - application/json
      description: Get detailed information of a specific city by ID.
      parameters:
      - description: City ID
        in: path
        name: city_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controllers.Response'
      summary: Get City Detail
      tags:
      - Location
  /provcity/detailprovince/{prov_id}:
    get:
      consumes:
      - application/json
      description: Get detailed information of a specific province by ID.
      parameters:
      - description: Province ID
        in: path
        name: prov_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controllers.Response'
      summary: Get Province Detail
      tags:
      - Location
  /provcity/listcities/{prov_id}:
    get:
      consumes:
      - application/json
      description: Get a list of cities in a specific province.
      parameters:
      - description: Province ID
        in: path
        name: prov_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controllers.Response'
      summary: Get List of Cities
      tags:
      - Location
  /provcity/listprovincies:
    get:
      consumes:
      - application/json
      description: Get a list of provinces with optional search, limit, and pagination.
      parameters:
      - description: Search province by name
        in: query
        name: search
        type: string
      - default: 10
        description: Limit results per page
        in: query
        name: limit
        type: integer
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.Response'
      summary: Get List of Provinces
      tags:
      - Location
  /toko:
    get:
      consumes:
      - application/json
      description: Get a list of all stores with pagination and search.
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Limit per page
        in: query
        name: limit
        type: integer
      - description: Search store by name
        in: query
        name: nama
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.Response'
      security:
      - BearerAuth: []
      summary: Get All Stores
      tags:
      - Store
  /toko/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve a store's details by its ID.
      parameters:
      - description: Store ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controllers.Response'
      security:
      - BearerAuth: []
      summary: Get Store by ID
      tags:
      - Store
    put:
      consumes:
      - application/json
      description: Update a store's information.
      parameters:
      - description: Store ID
        in: path
        name: id
        required: true
        type: integer
      - description: Store Name
        in: formData
        name: nama_toko
        type: string
      - description: Store Photo (Upload Image File)
        in: formData
        name: photo
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controllers.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controllers.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.Response'
      security:
      - BearerAuth: []
      summary: Update Store
      tags:
      - Store
  /toko/my:
    get:
      consumes:
      - application/json
      description: Get the current user's store.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controllers.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.Response'
      security:
      - BearerAuth: []
      summary: Get My Store
      tags:
      - Store
  /user:
    get:
      consumes:
      - application/json
      description: Get the current user's profile.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controllers.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.Response'
      security:
      - BearerAuth: []
      summary: Get My Profile
      tags:
      - User
    put:
      consumes:
      - application/json
      description: Update the current user's profile.
      parameters:
      - description: Update Profile Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/services.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controllers.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controllers.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.Response'
      security:
      - BearerAuth: []
      summary: Update My Profile
      tags:
      - User
  /user/alamat:
    get:
      consumes:
      - application/json
      description: Get all addresses for the authenticated user.
      parameters:
      - description: Filter by address title
        in: query
        name: judul_alamat
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controllers.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.Response'
      security:
      - BearerAuth: []
      summary: Get All Addresses
      tags:
      - Address
    post:
      consumes:
      - application/json
      description: Create a new address for the authenticated user.
      parameters:
      - description: Address Data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.Alamat'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/controllers.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controllers.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.Response'
      security:
      - BearerAuth: []
      summary: Create a new address
      tags:
      - Address
  /user/alamat/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a specific address for the authenticated user.
      parameters:
      - description: Address ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controllers.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controllers.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.Response'
      security:
      - BearerAuth: []
      summary: Delete Address by ID
      tags:
      - Address
    get:
      consumes:
      - application/json
      description: Get a specific address for the authenticated user.
      parameters:
      - description: Address ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controllers.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controllers.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.Response'
      security:
      - BearerAuth: []
      summary: Get Address by ID
      tags:
      - Address
    put:
      consumes:
      - application/json
      description: Update an existing address for the authenticated user.
      parameters:
      - description: Address ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated Address Data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.Alamat'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controllers.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controllers.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.Response'
      security:
      - BearerAuth: []
      summary: Update Address by ID
      tags:
      - Address
securityDefinitions:
  BearerAuth:
    description: 'Enter your token in the format: Bearer <token>'
    in: header
    name: token
    type: apiKey
swagger: "2.0"
